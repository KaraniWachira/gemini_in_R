---
title: "R shiny Apps Powered with Gemini"
---

# Gemini in R

### install required libraries

```{r}
# Install the packages

# install.packages("httr") 
# The httr package in R is a tool specifically designed to simplify making HTTP requests within your R code. 

# install.packages("jsonlite")
# The jsonlite package in R is a powerful tool for working with JSON data

# install.packages("base64enc")
# The base64enc package in R provides functions for encoding and decoding data in Base64 format.

```

### Generate Content Based on Prompt

Gemini API has the following two models which cover various use cases:

-   **Gemini Pro:** It can be used to generate text, code. It is also useful for problem solving, extracting key information etc. gemini app is powered by a specifically tuned version of Gemini Pro.

-   **Gemini Pro Vision:** It can handle both text and images as input and returns output as text.

### Google AI Studio [Get API key](Google%20AI%20Studio.)

let us generates a response from the Gemini Pro Model based on a question (prompt).

```{r}
# load libraries to use
library(httr)
library(jsonlite)
library(tidyverse)
library(usethis)
library(dotenv)
library(gemini.R)

```

```{r}
# Function to read .env file and set environment variables
read_dotenv <- function(file_path=".env") {
  if (!file.exists(file_path)) {
    stop(paste("Error: .env file not found at", file_path))
  }
  lines <- readLines(file_path)
  for (line in lines) {
    if (grepl("^\\s*#", line) || grepl("^\\s*$", line)) {
      next
    }
    parts <- strsplit(line, "=")[[1]]
    key <- trimws(parts[1])
    value <- trimws(parts[2])
    Sys.setenv(key, value)
  }
}

gemini <- function(prompt, 
                 temperature=0.5,
                 max_output_tokens=1024,
                 model = "gemini-pro") {
  
  api_key <- Sys.getenv("GEMINI_API_KEY")
  
    if(nchar(api_key)<1) {
      stop("API key not found in environment variables")
  }
  
  model_query <- paste0(model, ":generateContent")
  
  response <- POST(
    url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
    query = list(key = api_key),
    content_type_json(),
    encode = "json",
    body = list(
      contents = list(
        parts = list(
          list(text = prompt)
        )),
      generationConfig = list(
        temperature = temperature,
        maxOutputTokens = max_output_tokens
      )
    )
  )
  
  if(response$status_code>200) {
    stop(paste("Error - ", content(response)$error$message))
  }
  
  candidates <- content(response)$candidates
  outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
  
  return(outputs)
  
}

prompt <- "can i user node-cron libraries for tast scheduling in a shiny application?"
cat(gemini(prompt))


```

### To handle image as input, we can use the Gemini-pro-vision model. It helps to describe image. You can ask any question related to the image. Make sure to install "**base64enc**" library.

```{r}
# Function to read .env file and set environment variables
read_dotenv <- function(file_path=".env") {
  if (!file.exists(file_path)) {
    stop(paste("Error: .env file not found at", file_path))
  }
  lines <- readLines(file_path)
  for (line in lines) {
    if (grepl("^\\s*#", line) || grepl("^\\s*$", line)) {
      next
    }
    parts <- strsplit(line, "=")[[1]]
    key <- trimws(parts[1])
    value <- trimws(parts[2])
    Sys.setenv(key, value)
  }
}

library(base64enc)

gemini_vision <- function(prompt, 
                   image,
                   temperature=1.0,
                   max_output_tokens=4096,
                   api_key=Sys.getenv("GEMINI_API_KEY"),
                   model = "gemini-1.5-pro-latest") {
  
  if(nchar(api_key)<1) {
          stop("API key not found in environment variables")
  }
  
  model_query <- paste0(model, ":generateContent")
  
  response <- POST(
    url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
    query = list(key = api_key),
    content_type_json(),
    encode = "json",
    body = list(
      contents = list(
        parts = list(
          list(
            text = prompt
          ),
          list(
            inlineData = list(
              mimeType = "image/png",
              data = base64encode(image)
            )
          )
        )
      ),
      generationConfig = list(
        temperature = temperature,
        maxOutputTokens = max_output_tokens
      )
    )
  )
  
  if(response$status_code>200) {
    stop(paste("Error - ", content(response)$error$message))
  }
  
  candidates <- content(response)$candidates
  outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
  
  return(outputs)
  
}

gemini_vision(prompt = "tell me something intresting about the image", 
              image = "https://pbs.twimg.com/media/GDqT4JgbsAA_TLU.jpg:large")

```

### lets build together a chat bot assistant

Suppose you have some documents. You want to make a system where people can ask questions about these documents and a chat bot will answer based on what they ask

```{r}

make_prompt <- function(query, relevant_passage) {
  escaped <- gsub("'", "", gsub('"', "", gsub("\n", " ", relevant_passage)))
  prompt <- sprintf("You are a helpful and informative bot that answers questions using text from the reference passage included below. \
  Be sure to respond in a complete sentence, being comprehensive, including all relevant background information. \
  However, you are talking to a non-technical audience, so be sure to break down complicated concepts and \
  strike a friendly and conversational tone. \
  If the passage is irrelevant to the answer, you may ignore it.
  QUESTION: '%s'
  PASSAGE: '%s'

    ANSWER:
  ", query, escaped)
  
  return(prompt)
}

passage <- "As of today, April 13th, 2024, the electrifying world of English football sees a tight race in the Premier League. Twenty elite clubs are battling it out for a coveted championship title across a nine-month odyssey, kicking off in August's early sunshine and reaching its climax in May's nail-biting finale. Each team faces every other opponent twice, once in the comfort of their home stadium and once in a hostile away environment. Victories are cherished and rewarded with three precious points, while draws earn a single point, and defeats leave teams empty-handed. The club that meticulously accumulates the most points throughout this grueling campaign is crowned champion, etching their name in Premier League folklore.

However, the fight for survival adds another layer of drama. The three teams finishing at the bottom of the table face the harsh reality of relegation, dropping down to the Championship, the second tier of English football. This constant struggle for survival, coupled with the relentless pursuit of ultimate glory, fuels the Premier League's global appeal. Beyond the points and positions, the league boasts a rich tapestry of historic rivalries, iconic stadiums, and world-class players, making it a spectacle that enthralls fans across the globe.

Currently, the race for the top spot is heating up, with Arsenal leading the pack with 71 points after 31 games played. Liverpool and Manchester City are hot on their heels, both with 71 points as well. The relegation battle is also tense, with Nottingham Forest and Luton Town precariously close to the drop zone."

```

pass a prompt to our helpful chat bot assistant

```{r}
query <- "how many games does each team play in a season?"
prompt = make_prompt(query, passage)
cat(gemini(prompt))
```

```{r}
query <- "Summarize this article giving most important points about the game"
prompt = make_prompt(query, passage)
cat(gemini(prompt))
```

## let us build a Shiny App to Explain Image

go to app.R code
